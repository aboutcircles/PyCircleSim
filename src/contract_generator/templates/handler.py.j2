import random
import importlib
from typing import Dict, Any, Optional
from eth_pydantic_types import HexBytes
from src.framework.core.context import SimulationContext
from src.protocols.interfaces.{{ contract_name.lower() }}.{{ contract_name.lower() }}_client import {{ contract_name }}Client

{% for func in functions if not func.is_view %}
class {{ func.name|camel_case }}BaseHandler:
    """Base handler class for {{ func.name }} action."""
    
    def __init__(
        self,
        client: {{ contract_name }}Client,
        chain,
        logger,
        strategy_name: str = "basic"
    ):
        self.client = client
        self.chain = chain
        self.logger = logger
        
        try:
            module_path = f"src.protocols.handler_strategies.{client.__class__.__name__.lower().replace('client', '')}.{strategy_name}_strategies"
            strategy_module = importlib.import_module(module_path)
            strategy_class = getattr(strategy_module, f"{self.__class__.__name__.replace('Handler', 'Strategy').replace('Base', '')}")
            self.strategy = strategy_class()
        except (ImportError, AttributeError) as e:
            self.logger.error(f"Failed to load strategy {strategy_name}: {e}")
            self.strategy = self

    def get_params(self, context: SimulationContext) -> Dict[str, Any]:
        """Default parameter generation if no strategy is loaded"""
        return {
            'sender': next(iter(context.agent.accounts.keys())) if context.agent.accounts else None,
            'value': 0,
            {% for inp in func.inputs %}
            '{{ inp.name }}{% if inp.name in ["from", "to", "in", "import", "class", "def", "return", "pass"] %}_{% endif %}': None,  # type: {{ inp.type }}
            {% endfor %}
        }

    def execute(self, context: SimulationContext, params: Optional[Dict[str, Any]] = None) -> bool:
        try:
            execution_params = params if params else self.strategy.get_params(context)
            if not execution_params:
                return False
                
            return self.client.{{ func.name }}(
                {% for orig_name, safe_name in func.get_input_names() %}
                {{ safe_name }}=execution_params.get("{{ safe_name }}"),
                {% endfor %}
                sender=execution_params.get("sender"),
                value=execution_params.get("value", 0)
            )

        except Exception as e:
            self.logger.error(f"{{ func.name }} action failed: {e}", exc_info=True)
            return False

class {{ func.name|camel_case }}Handler({{ func.name|camel_case }}BaseHandler):
    """Concrete handler implementation"""
    pass

{% endfor %}