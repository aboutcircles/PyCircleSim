from typing import Dict, Any, Optional
from src.protocols.handler_strategies.base import BaseStrategy
from src.framework.core.context import SimulationContext

{% for func in functions if not func.is_view %}
class {{ func.name|camel_case }}Strategy(BaseStrategy):
    def get_params(self, context: SimulationContext) -> Optional[Dict[str, Any]]:
        sender = self.get_sender(context)
        if not sender:
            return None
            
        # Initialize parameters with transaction details
        params = {
            'sender': sender,     # Transaction sender
            'value': 0            # Transaction value
        }
            
        {% for inp in func.inputs %}
        {% if inp.type.startswith('tuple') %}
        # Initialize {{ inp.name }} tuple fields
        {{ inp.name }}_fields = {
            {% for component in inp.components %}
            '{{ component.name }}': None,  # {{ component.type }}
            {% endfor %}
        }
        params['{{ inp.name }}'] = {{ inp.name }}_fields
        {% else %}
        {% if inp.name == "sender" %}
        params['sender_account'] = None  # type: {{ inp.type }} (renamed from 'sender')
        {% elif inp.name == "value" %}
        params['amount_value'] = None  # type: {{ inp.type }} (renamed from 'value')
        {% else %}
        params['{{ inp.name }}{% if inp.name in ["from", "to", "in", "import", "class", "def", "return", "pass"] %}_{% endif %}'] = None  # type: {{ inp.type }}
        {% endif %}
        {% endif %}
        {% endfor %}

        return params

{% endfor %}